// Package customerapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package cardataapi

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ChargingSessionDtoMileageUnits.
const (
	MileageUnitsKM ChargingSessionDtoMileageUnits = "MileageUnits.KM"
	MileageUnitsMI ChargingSessionDtoMileageUnits = "MileageUnits.MI"
)

// Defines values for ContainerDetailsDtoState.
const (
	ContainerDetailsDtoStateACTIVE  ContainerDetailsDtoState = "ACTIVE"
	ContainerDetailsDtoStateDELETED ContainerDetailsDtoState = "DELETED"
)

// Defines values for ContainerDtoState.
const (
	ContainerDtoStateACTIVE  ContainerDtoState = "ACTIVE"
	ContainerDtoStateDELETED ContainerDtoState = "DELETED"
)

// Defines values for TyreDefectDtoStatusColor.
const (
	TyreDefectDtoStatusColorGREEN  TyreDefectDtoStatusColor = "GREEN"
	TyreDefectDtoStatusColorGREY   TyreDefectDtoStatusColor = "GREY"
	TyreDefectDtoStatusColorRED    TyreDefectDtoStatusColor = "RED"
	TyreDefectDtoStatusColorYELLOW TyreDefectDtoStatusColor = "YELLOW"
)

// Defines values for TyreProductionDateDtoStatusColor.
const (
	TyreProductionDateDtoStatusColorGREEN  TyreProductionDateDtoStatusColor = "GREEN"
	TyreProductionDateDtoStatusColorGREY   TyreProductionDateDtoStatusColor = "GREY"
	TyreProductionDateDtoStatusColorRED    TyreProductionDateDtoStatusColor = "RED"
	TyreProductionDateDtoStatusColorYELLOW TyreProductionDateDtoStatusColor = "YELLOW"
)

// Defines values for TyreWearDtoStatusColor.
const (
	GREEN  TyreWearDtoStatusColor = "GREEN"
	GREY   TyreWearDtoStatusColor = "GREY"
	RED    TyreWearDtoStatusColor = "RED"
	YELLOW TyreWearDtoStatusColor = "YELLOW"
)

// Defines values for TyreWearDtoUnit.
const (
	KILOMETER TyreWearDtoUnit = "KILOMETER"
	MILE      TyreWearDtoUnit = "MILE"
)

// Defines values for VehicleDtoBrand.
const (
	BMW         VehicleDtoBrand = "BMW"
	BMWMotorrad VehicleDtoBrand = "BMW Motorrad"
	BMWi        VehicleDtoBrand = "BMWi"
	MINI        VehicleDtoBrand = "MINI"
	RollsRoyce  VehicleDtoBrand = "Rolls-Royce"
	ToyotaSupra VehicleDtoBrand = "Toyota-Supra"
)

// Defines values for VehicleMappingDtoMappingType.
const (
	PRIMARY   VehicleMappingDtoMappingType = "PRIMARY"
	SECONDARY VehicleMappingDtoMappingType = "SECONDARY"
)

// AggregatedQualityStatusDto defines model for AggregatedQualityStatusDto.
type AggregatedQualityStatusDto struct {
	Label         *string `json:"label,omitempty"`
	QualityStatus *string `json:"qualityStatus,omitempty"`
	Value         *string `json:"value,omitempty"`
}

// BusinessErrorDto defines model for BusinessErrorDto.
type BusinessErrorDto struct {
	CreationTime *time.Time `json:"creationTime,omitempty"`
	Hint         *string    `json:"hint,omitempty"`
}

// ChargingBlockDto defines model for ChargingBlockDto.
type ChargingBlockDto struct {
	AveragePowerGridKw *float64 `json:"averagePowerGridKw,omitempty"`
	EndTime            int64    `json:"endTime"`
	StartTime          int64    `json:"startTime"`
}

// ChargingCostInformationDto defines model for ChargingCostInformationDto.
type ChargingCostInformationDto struct {
	CalculatedChargingCost float64 `json:"calculatedChargingCost"`
	CalculatedSavings      float64 `json:"calculatedSavings"`
	Currency               string  `json:"currency"`
}

// ChargingHistoryResponseDto defines model for ChargingHistoryResponseDto.
type ChargingHistoryResponseDto struct {
	Data      []ChargingSessionDto `json:"data"`
	NextToken *string              `json:"next_token,omitempty"`
}

// ChargingLocationDto defines model for ChargingLocationDto.
type ChargingLocationDto struct {
	FormattedAddress    string   `json:"formattedAddress"`
	MapMatchedLatitude  *float32 `json:"mapMatchedLatitude,omitempty"`
	MapMatchedLongitude *float32 `json:"mapMatchedLongitude,omitempty"`
	Municipality        string   `json:"municipality"`
	StreetAddress       string   `json:"streetAddress"`
}

// ChargingSessionDto defines model for ChargingSessionDto.
type ChargingSessionDto struct {
	BusinessErrors                 *[]BusinessErrorDto            `json:"businessErrors,omitempty"`
	ChargingBlocks                 *[]ChargingBlockDto            `json:"chargingBlocks,omitempty"`
	ChargingCostInformation        *ChargingCostInformationDto    `json:"chargingCostInformation,omitempty"`
	ChargingLocation               *ChargingLocationDto           `json:"chargingLocation,omitempty"`
	DisplayedSoc                   int32                          `json:"displayedSoc"`
	DisplayedStartSoc              int32                          `json:"displayedStartSoc"`
	EndTime                        int64                          `json:"endTime"`
	EnergyConsumedFromPowerGridKwh *float64                       `json:"energyConsumedFromPowerGridKwh,omitempty"`
	IsPreconditioningActivated     bool                           `json:"isPreconditioningActivated"`
	Mileage                        int32                          `json:"mileage"`
	MileageUnits                   ChargingSessionDtoMileageUnits `json:"mileageUnits"`
	PublicChargingPoint            *PublicChargingPointDto        `json:"publicChargingPoint,omitempty"`
	StartTime                      int64                          `json:"startTime"`
	TimeZone                       string                         `json:"timeZone"`
	TotalChargingDurationSec       int32                          `json:"totalChargingDurationSec"`
}

// ChargingSessionDtoMileageUnits defines model for ChargingSessionDto.MileageUnits.
type ChargingSessionDtoMileageUnits string

// ContainerDetailsDto defines model for ContainerDetailsDto.
type ContainerDetailsDto struct {
	ContainerId          *string                   `json:"containerId,omitempty"`
	Created              *time.Time                `json:"created,omitempty"`
	Name                 *string                   `json:"name,omitempty"`
	Purpose              *string                   `json:"purpose,omitempty"`
	State                *ContainerDetailsDtoState `json:"state,omitempty"`
	TechnicalDescriptors *[]string                 `json:"technicalDescriptors,omitempty"`
}

// ContainerDetailsDtoState defines model for ContainerDetailsDto.State.
type ContainerDetailsDtoState string

// ContainerDto defines model for ContainerDto.
type ContainerDto struct {
	ContainerId *string            `json:"containerId,omitempty"`
	Created     *time.Time         `json:"created,omitempty"`
	Name        *string            `json:"name,omitempty"`
	Purpose     *string            `json:"purpose,omitempty"`
	State       *ContainerDtoState `json:"state,omitempty"`
}

// ContainerDtoState defines model for ContainerDto.State.
type ContainerDtoState string

// ContainerListDto defines model for ContainerListDto.
type ContainerListDto struct {
	Containers *[]ContainerDto `json:"containers,omitempty"`
}

// CreateContainerRequest Container creation request payload
type CreateContainerRequest struct {
	Name                 *string   `json:"name,omitempty"`
	Purpose              *string   `json:"purpose,omitempty"`
	TechnicalDescriptors *[]string `json:"technicalDescriptors,omitempty"`
}

// CustomerErrorResponse defines model for CustomerErrorResponse.
type CustomerErrorResponse struct {
	ExveErrorId  *string `json:"exveErrorId,omitempty"`
	ExveErrorMsg *string `json:"exveErrorMsg,omitempty"`
	ExveErrorRef *string `json:"exveErrorRef,omitempty"`
	ExveNote     *string `json:"exveNote,omitempty"`
}

// DimensionDto defines model for DimensionDto.
type DimensionDto struct {
	AspectRatio      *int32  `json:"aspectRatio,omitempty"`
	ConstructionType *string `json:"constructionType,omitempty"`
	Label            *string `json:"label,omitempty"`
	LoadIndex        *int32  `json:"loadIndex,omitempty"`
	RimDiameter      *int32  `json:"rimDiameter,omitempty"`
	SectionWidth     *int32  `json:"sectionWidth,omitempty"`
	SpeedRating      *string `json:"speedRating,omitempty"`
	Value            *string `json:"value,omitempty"`
}

// ExVeTelematicDataResponseDto defines model for ExVeTelematicDataResponseDto.
type ExVeTelematicDataResponseDto struct {
	TelematicData *map[string]TelematicDataEntryDto `json:"telematicData,omitempty"`
}

// LocationBasedChargingSettingsDataDto defines model for LocationBasedChargingSettingsDataDto.
type LocationBasedChargingSettingsDataDto struct {
	AcCurrentLimit                *float64                              `json:"acCurrentLimit,omitempty"`
	AcCurrentLimitFlag            *string                               `json:"acCurrentLimitFlag,omitempty"`
	AcousticLimit                 *string                               `json:"acousticLimit,omitempty"`
	ChargingMode                  *string                               `json:"chargingMode,omitempty"`
	ChargingPlug                  *string                               `json:"chargingPlug,omitempty"`
	ChargingTimeWindows           *[]LocationBasedChargingTimeWindowDto `json:"chargingTimeWindows,omitempty"`
	ClusterLocationId             *string                               `json:"clusterLocationId,omitempty"`
	FlapLock                      *string                               `json:"flapLock,omitempty"`
	Id                            *string                               `json:"id,omitempty"`
	LastUpdated                   *string                               `json:"lastUpdated,omitempty"`
	LastVisit                     *string                               `json:"lastVisit,omitempty"`
	Latitude                      *float64                              `json:"latitude,omitempty"`
	Longitude                     *float64                              `json:"longitude,omitempty"`
	OptimizedChargingPreference   *string                               `json:"optimizedChargingPreference,omitempty"`
	StartChargingTimePeriodHour   *int32                                `json:"startChargingTimePeriodHour,omitempty"`
	StartChargingTimePeriodMinute *int32                                `json:"startChargingTimePeriodMinute,omitempty"`
	StopChargingTimePeriodHour    *int32                                `json:"stopChargingTimePeriodHour,omitempty"`
	StopChargingTimePeriodMinute  *int32                                `json:"stopChargingTimePeriodMinute,omitempty"`
	VehicleIdWithGcid             *string                               `json:"vehicleIdWithGcid,omitempty"`
	Visits                        *int32                                `json:"visits,omitempty"`
}

// LocationBasedChargingSettingsDto defines model for LocationBasedChargingSettingsDto.
type LocationBasedChargingSettingsDto struct {
	Data      *[]LocationBasedChargingSettingsDataDto `json:"data,omitempty"`
	NextToken *string                                 `json:"nextToken,omitempty"`
}

// LocationBasedChargingTimeWindowDto defines model for LocationBasedChargingTimeWindowDto.
type LocationBasedChargingTimeWindowDto struct {
	StartChargingTimePeriodHour   *int32 `json:"startChargingTimePeriodHour,omitempty"`
	StartChargingTimePeriodMinute *int32 `json:"startChargingTimePeriodMinute,omitempty"`
	StopChargingTimePeriodHour    *int32 `json:"stopChargingTimePeriodHour,omitempty"`
	StopChargingTimePeriodMinute  *int32 `json:"stopChargingTimePeriodMinute,omitempty"`
}

// MountingDateDto defines model for MountingDateDto.
type MountingDateDto struct {
	Label        *string `json:"label,omitempty"`
	MountingDate *string `json:"mountingDate,omitempty"`
	Value        *string `json:"value,omitempty"`
}

// OptimizedForOemDto defines model for OptimizedForOemDto.
type OptimizedForOemDto struct {
	Label           *string `json:"label,omitempty"`
	OptimizedForOem *string `json:"optimizedForOem,omitempty"`
	Value           *string `json:"value,omitempty"`
}

// PartNumberDto defines model for PartNumberDto.
type PartNumberDto struct {
	Label      *string `json:"label,omitempty"`
	PartNumber *string `json:"partNumber,omitempty"`
	Value      *string `json:"value,omitempty"`
}

// PassengerCarDto defines model for PassengerCarDto.
type PassengerCarDto struct {
	MountedTyres   *PassengerCarTyreSetDto `json:"mountedTyres,omitempty"`
	UnmountedTyres *PassengerCarTyreSetDto `json:"unmountedTyres,omitempty"`
}

// PassengerCarTyreSetDto defines model for PassengerCarTyreSetDto.
type PassengerCarTyreSetDto struct {
	AggregatedQualityStatus *AggregatedQualityStatusDto `json:"aggregatedQualityStatus,omitempty"`
	FrontLeft               *TyreDataDto                `json:"frontLeft,omitempty"`
	FrontRight              *TyreDataDto                `json:"frontRight,omitempty"`
	Label                   *string                     `json:"label,omitempty"`
	RearLeft                *TyreDataDto                `json:"rearLeft,omitempty"`
	RearRight               *TyreDataDto                `json:"rearRight,omitempty"`
}

// PublicChargingPointDto defines model for PublicChargingPointDto.
type PublicChargingPointDto struct {
	PotentialChargingPointMatches []PublicChargingPointMatchesDto `json:"potentialChargingPointMatches"`
}

// PublicChargingPointMatchesDto defines model for PublicChargingPointMatchesDto.
type PublicChargingPointMatchesDto struct {
	City          *string `json:"city,omitempty"`
	PostalCode    *string `json:"postalCode,omitempty"`
	ProviderName  *string `json:"providerName,omitempty"`
	StreetAddress *string `json:"streetAddress,omitempty"`
}

// QualityStatusDto defines model for QualityStatusDto.
type QualityStatusDto struct {
	Label         *string `json:"label,omitempty"`
	QualityStatus *string `json:"qualityStatus,omitempty"`
	Value         *string `json:"value,omitempty"`
}

// RunFlatDto defines model for RunFlatDto.
type RunFlatDto struct {
	Label   *string `json:"label,omitempty"`
	RunFlat *bool   `json:"runFlat,omitempty"`
	Value   *string `json:"value,omitempty"`
}

// SeasonDto defines model for SeasonDto.
type SeasonDto struct {
	Label  *string `json:"label,omitempty"`
	Season *string `json:"season,omitempty"`
	Value  *string `json:"value,omitempty"`
}

// SmartMaintenanceErrorDto defines model for SmartMaintenanceErrorDto.
type SmartMaintenanceErrorDto struct {
	EventId *string                 `json:"eventId,omitempty"`
	Message *map[string]interface{} `json:"message,omitempty"`
	Type    *string                 `json:"type,omitempty"`
}

// SmartMaintenanceTyreDiagnosisDto defines model for SmartMaintenanceTyreDiagnosisDto.
type SmartMaintenanceTyreDiagnosisDto struct {
	Errors       *[]SmartMaintenanceErrorDto `json:"errors,omitempty"`
	PassengerCar *PassengerCarDto            `json:"passengerCar,omitempty"`
}

// TelematicDataEntryDto defines model for TelematicDataEntryDto.
type TelematicDataEntryDto struct {
	Timestamp *string `json:"timestamp,omitempty"`
	Unit      *string `json:"unit,omitempty"`
	Value     *string `json:"value,omitempty"`
}

// TreadDto defines model for TreadDto.
type TreadDto struct {
	Carcass      *string `json:"carcass,omitempty"`
	Label        *string `json:"label,omitempty"`
	Manufacturer *string `json:"manufacturer,omitempty"`
	TreadDesign  *string `json:"treadDesign,omitempty"`
	Value        *string `json:"value,omitempty"`
}

// TyreDataDto defines model for TyreDataDto.
type TyreDataDto struct {
	Dimension          *DimensionDto          `json:"dimension,omitempty"`
	Label              *string                `json:"label,omitempty"`
	MountingDate       *MountingDateDto       `json:"mountingDate,omitempty"`
	OptimizedForOem    *OptimizedForOemDto    `json:"optimizedForOem,omitempty"`
	PartNumber         *PartNumberDto         `json:"partNumber,omitempty"`
	QualityStatus      *QualityStatusDto      `json:"qualityStatus,omitempty"`
	RunFlat            *RunFlatDto            `json:"runFlat,omitempty"`
	Season             *SeasonDto             `json:"season,omitempty"`
	Tread              *TreadDto              `json:"tread,omitempty"`
	TyreDefect         *TyreDefectDto         `json:"tyreDefect,omitempty"`
	TyreProductionDate *TyreProductionDateDto `json:"tyreProductionDate,omitempty"`
	TyreWear           *TyreWearDto           `json:"tyreWear,omitempty"`
}

// TyreDefectDto defines model for TyreDefectDto.
type TyreDefectDto struct {
	Label       *string                   `json:"label,omitempty"`
	Status      *string                   `json:"status,omitempty"`
	StatusColor *TyreDefectDtoStatusColor `json:"statusColor,omitempty"`
	Value       *string                   `json:"value,omitempty"`
}

// TyreDefectDtoStatusColor defines model for TyreDefectDto.StatusColor.
type TyreDefectDtoStatusColor string

// TyreProductionDateDto defines model for TyreProductionDateDto.
type TyreProductionDateDto struct {
	Label       *string                           `json:"label,omitempty"`
	StatusColor *TyreProductionDateDtoStatusColor `json:"statusColor,omitempty"`
	Value       *string                           `json:"value,omitempty"`
}

// TyreProductionDateDtoStatusColor defines model for TyreProductionDateDto.StatusColor.
type TyreProductionDateDtoStatusColor string

// TyreWearDto defines model for TyreWearDto.
type TyreWearDto struct {
	DueMileage  *int32                  `json:"dueMileage,omitempty"`
	Label       *string                 `json:"label,omitempty"`
	Status      *string                 `json:"status,omitempty"`
	StatusColor *TyreWearDtoStatusColor `json:"statusColor,omitempty"`
	Unit        *TyreWearDtoUnit        `json:"unit,omitempty"`
	Value       *string                 `json:"value,omitempty"`
}

// TyreWearDtoStatusColor defines model for TyreWearDto.StatusColor.
type TyreWearDtoStatusColor string

// TyreWearDtoUnit defines model for TyreWearDto.Unit.
type TyreWearDtoUnit string

// VehicleDto defines model for VehicleDto.
type VehicleDto struct {
	BodyType             *string          `json:"bodyType,omitempty"`
	Brand                *VehicleDtoBrand `json:"brand,omitempty"`
	ChargingModes        *[]string        `json:"chargingModes,omitempty"`
	ColourCode           *string          `json:"colourCode,omitempty"`
	ColourCodeRaw        *string          `json:"colourCodeRaw,omitempty"`
	ConstructionDate     *string          `json:"constructionDate,omitempty"`
	CountryCodeISO       *string          `json:"countryCodeISO,omitempty"`
	DriveTrain           *string          `json:"driveTrain,omitempty"`
	Engine               *string          `json:"engine,omitempty"`
	FullSAList           *string          `json:"fullSAList,omitempty"`
	HasNavi              *bool            `json:"hasNavi,omitempty"`
	HasSunRoof           *bool            `json:"hasSunRoof,omitempty"`
	HeadUnit             *string          `json:"headUnit,omitempty"`
	HvsMaxEnergyAbsolute *string          `json:"hvsMaxEnergyAbsolute,omitempty"`
	IsTelematicsCapable  *bool            `json:"isTelematicsCapable,omitempty"`
	ModelKey             *string          `json:"modelKey,omitempty"`
	ModelName            *string          `json:"modelName,omitempty"`
	ModelRange           *string          `json:"modelRange,omitempty"`
	NumberOfDoors        *int32           `json:"numberOfDoors,omitempty"`
	PropulsionType       *string          `json:"propulsionType,omitempty"`
	PuStep               *string          `json:"puStep,omitempty"`
	Series               *string          `json:"series,omitempty"`
	SimStatus            *string          `json:"simStatus,omitempty"`
	Steering             *string          `json:"steering,omitempty"`
	Vin                  *string          `json:"vin,omitempty"`
}

// VehicleDtoBrand defines model for VehicleDto.Brand.
type VehicleDtoBrand string

// VehicleMappingDto defines model for VehicleMappingDto.
type VehicleMappingDto struct {
	MappedSince *time.Time                    `json:"mappedSince,omitempty"`
	MappingType *VehicleMappingDtoMappingType `json:"mappingType,omitempty"`
	Vin         *string                       `json:"vin,omitempty"`
}

// VehicleMappingDtoMappingType defines model for VehicleMappingDto.MappingType.
type VehicleMappingDtoMappingType string

// ListContainersParams defines parameters for ListContainers.
type ListContainersParams struct {
	XVersion string `json:"x-version"`
}

// GetContainerDetailsParams defines parameters for GetContainerDetails.
type GetContainerDetailsParams struct {
	XVersion string `json:"x-version"`
}

// GetMappingsParams defines parameters for GetMappings.
type GetMappingsParams struct {
	XVersion string `json:"x-version"`
}

// GetBasicDataParams defines parameters for GetBasicData.
type GetBasicDataParams struct {
	XVersion string `json:"x-version"`
}

// GetChargingHistoryParams defines parameters for GetChargingHistory.
type GetChargingHistoryParams struct {
	NextToken *string   `form:"nextToken,omitempty" json:"nextToken,omitempty"`
	From      time.Time `form:"from" json:"from"`
	To        time.Time `form:"to" json:"to"`
	XVersion  string    `json:"x-version"`
}

// GetImageParams defines parameters for GetImage.
type GetImageParams struct {
	XVersion string `json:"x-version"`
}

// GetLocationBasedChargingSettingsParams defines parameters for GetLocationBasedChargingSettings.
type GetLocationBasedChargingSettingsParams struct {
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
	XVersion  string  `json:"x-version"`
}

// GetSmartMaintenanceTyreDiagnosisParams defines parameters for GetSmartMaintenanceTyreDiagnosis.
type GetSmartMaintenanceTyreDiagnosisParams struct {
	XVersion string `json:"x-version"`
}

// GetTelematicDataParams defines parameters for GetTelematicData.
type GetTelematicDataParams struct {
	ContainerId string `form:"containerId" json:"containerId"`
	XVersion    string `json:"x-version"`
}

// CreateContainerJSONRequestBody defines body for CreateContainer for application/json ContentType.
type CreateContainerJSONRequestBody = CreateContainerRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListContainers request
	ListContainers(ctx context.Context, params *ListContainersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateContainerWithBody request with any body
	CreateContainerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateContainer(ctx context.Context, body CreateContainerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContainer request
	DeleteContainer(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContainerDetails request
	GetContainerDetails(ctx context.Context, containerId string, params *GetContainerDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMappings request
	GetMappings(ctx context.Context, params *GetMappingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBasicData request
	GetBasicData(ctx context.Context, vin string, params *GetBasicDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChargingHistory request
	GetChargingHistory(ctx context.Context, vin string, params *GetChargingHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetImage request
	GetImage(ctx context.Context, vin string, params *GetImageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocationBasedChargingSettings request
	GetLocationBasedChargingSettings(ctx context.Context, vin string, params *GetLocationBasedChargingSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmartMaintenanceTyreDiagnosis request
	GetSmartMaintenanceTyreDiagnosis(ctx context.Context, vin string, params *GetSmartMaintenanceTyreDiagnosisParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTelematicData request
	GetTelematicData(ctx context.Context, vin string, params *GetTelematicDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListContainers(ctx context.Context, params *ListContainersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListContainersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContainerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContainerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContainer(ctx context.Context, body CreateContainerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContainerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContainer(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContainerRequest(c.Server, containerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContainerDetails(ctx context.Context, containerId string, params *GetContainerDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContainerDetailsRequest(c.Server, containerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMappings(ctx context.Context, params *GetMappingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMappingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBasicData(ctx context.Context, vin string, params *GetBasicDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBasicDataRequest(c.Server, vin, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChargingHistory(ctx context.Context, vin string, params *GetChargingHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChargingHistoryRequest(c.Server, vin, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetImage(ctx context.Context, vin string, params *GetImageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetImageRequest(c.Server, vin, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocationBasedChargingSettings(ctx context.Context, vin string, params *GetLocationBasedChargingSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocationBasedChargingSettingsRequest(c.Server, vin, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmartMaintenanceTyreDiagnosis(ctx context.Context, vin string, params *GetSmartMaintenanceTyreDiagnosisParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmartMaintenanceTyreDiagnosisRequest(c.Server, vin, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTelematicData(ctx context.Context, vin string, params *GetTelematicDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTelematicDataRequest(c.Server, vin, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListContainersRequest generates requests for ListContainers
func NewListContainersRequest(server string, params *ListContainersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/containers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-version", runtime.ParamLocationHeader, params.XVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-version", headerParam0)

	}

	return req, nil
}

// NewCreateContainerRequest calls the generic CreateContainer builder with application/json body
func NewCreateContainerRequest(server string, body CreateContainerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateContainerRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateContainerRequestWithBody generates requests for CreateContainer with any type of body
func NewCreateContainerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/containers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteContainerRequest generates requests for DeleteContainer
func NewDeleteContainerRequest(server string, containerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/containers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContainerDetailsRequest generates requests for GetContainerDetails
func NewGetContainerDetailsRequest(server string, containerId string, params *GetContainerDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/containers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-version", runtime.ParamLocationHeader, params.XVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-version", headerParam0)

	}

	return req, nil
}

// NewGetMappingsRequest generates requests for GetMappings
func NewGetMappingsRequest(server string, params *GetMappingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/vehicles/mappings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-version", runtime.ParamLocationHeader, params.XVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-version", headerParam0)

	}

	return req, nil
}

// NewGetBasicDataRequest generates requests for GetBasicData
func NewGetBasicDataRequest(server string, vin string, params *GetBasicDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vin", runtime.ParamLocationPath, vin)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/vehicles/%s/basicData", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-version", runtime.ParamLocationHeader, params.XVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-version", headerParam0)

	}

	return req, nil
}

// NewGetChargingHistoryRequest generates requests for GetChargingHistory
func NewGetChargingHistoryRequest(server string, vin string, params *GetChargingHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vin", runtime.ParamLocationPath, vin)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/vehicles/%s/chargingHistory", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-version", runtime.ParamLocationHeader, params.XVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-version", headerParam0)

	}

	return req, nil
}

// NewGetImageRequest generates requests for GetImage
func NewGetImageRequest(server string, vin string, params *GetImageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vin", runtime.ParamLocationPath, vin)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/vehicles/%s/image", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-version", runtime.ParamLocationHeader, params.XVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-version", headerParam0)

	}

	return req, nil
}

// NewGetLocationBasedChargingSettingsRequest generates requests for GetLocationBasedChargingSettings
func NewGetLocationBasedChargingSettingsRequest(server string, vin string, params *GetLocationBasedChargingSettingsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vin", runtime.ParamLocationPath, vin)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/vehicles/%s/locationBasedChargingSettings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NextToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-version", runtime.ParamLocationHeader, params.XVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-version", headerParam0)

	}

	return req, nil
}

// NewGetSmartMaintenanceTyreDiagnosisRequest generates requests for GetSmartMaintenanceTyreDiagnosis
func NewGetSmartMaintenanceTyreDiagnosisRequest(server string, vin string, params *GetSmartMaintenanceTyreDiagnosisParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vin", runtime.ParamLocationPath, vin)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/vehicles/%s/smartMaintenanceTyreDiagnosis", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-version", runtime.ParamLocationHeader, params.XVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-version", headerParam0)

	}

	return req, nil
}

// NewGetTelematicDataRequest generates requests for GetTelematicData
func NewGetTelematicDataRequest(server string, vin string, params *GetTelematicDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vin", runtime.ParamLocationPath, vin)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/vehicles/%s/telematicData", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "containerId", runtime.ParamLocationQuery, params.ContainerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-version", runtime.ParamLocationHeader, params.XVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-version", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListContainersWithResponse request
	ListContainersWithResponse(ctx context.Context, params *ListContainersParams, reqEditors ...RequestEditorFn) (*ListContainersResponse, error)

	// CreateContainerWithBodyWithResponse request with any body
	CreateContainerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContainerResponse, error)

	CreateContainerWithResponse(ctx context.Context, body CreateContainerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContainerResponse, error)

	// DeleteContainerWithResponse request
	DeleteContainerWithResponse(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*DeleteContainerResponse, error)

	// GetContainerDetailsWithResponse request
	GetContainerDetailsWithResponse(ctx context.Context, containerId string, params *GetContainerDetailsParams, reqEditors ...RequestEditorFn) (*GetContainerDetailsResponse, error)

	// GetMappingsWithResponse request
	GetMappingsWithResponse(ctx context.Context, params *GetMappingsParams, reqEditors ...RequestEditorFn) (*GetMappingsResponse, error)

	// GetBasicDataWithResponse request
	GetBasicDataWithResponse(ctx context.Context, vin string, params *GetBasicDataParams, reqEditors ...RequestEditorFn) (*GetBasicDataResponse, error)

	// GetChargingHistoryWithResponse request
	GetChargingHistoryWithResponse(ctx context.Context, vin string, params *GetChargingHistoryParams, reqEditors ...RequestEditorFn) (*GetChargingHistoryResponse, error)

	// GetImageWithResponse request
	GetImageWithResponse(ctx context.Context, vin string, params *GetImageParams, reqEditors ...RequestEditorFn) (*GetImageResponse, error)

	// GetLocationBasedChargingSettingsWithResponse request
	GetLocationBasedChargingSettingsWithResponse(ctx context.Context, vin string, params *GetLocationBasedChargingSettingsParams, reqEditors ...RequestEditorFn) (*GetLocationBasedChargingSettingsResponse, error)

	// GetSmartMaintenanceTyreDiagnosisWithResponse request
	GetSmartMaintenanceTyreDiagnosisWithResponse(ctx context.Context, vin string, params *GetSmartMaintenanceTyreDiagnosisParams, reqEditors ...RequestEditorFn) (*GetSmartMaintenanceTyreDiagnosisResponse, error)

	// GetTelematicDataWithResponse request
	GetTelematicDataWithResponse(ctx context.Context, vin string, params *GetTelematicDataParams, reqEditors ...RequestEditorFn) (*GetTelematicDataResponse, error)
}

type ListContainersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerListDto
	XML200       *ContainerListDto
	JSON400      *CustomerErrorResponse
	XML400       *CustomerErrorResponse
	JSON401      *CustomerErrorResponse
	XML401       *CustomerErrorResponse
	JSON403      *CustomerErrorResponse
	XML403       *CustomerErrorResponse
	JSON404      *CustomerErrorResponse
	XML404       *CustomerErrorResponse
	JSON500      *CustomerErrorResponse
	XML500       *CustomerErrorResponse
	JSON503      *CustomerErrorResponse
	XML503       *CustomerErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListContainersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListContainersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateContainerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContainerDetailsDto
	XML201       *ContainerDetailsDto
	JSON400      *CustomerErrorResponse
	XML400       *CustomerErrorResponse
	JSON401      *CustomerErrorResponse
	XML401       *CustomerErrorResponse
	JSON403      *CustomerErrorResponse
	XML403       *CustomerErrorResponse
	JSON404      *CustomerErrorResponse
	XML404       *CustomerErrorResponse
	JSON500      *CustomerErrorResponse
	XML500       *CustomerErrorResponse
	JSON503      *CustomerErrorResponse
	XML503       *CustomerErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateContainerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateContainerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContainerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *CustomerErrorResponse
	XML400       *CustomerErrorResponse
	JSON401      *CustomerErrorResponse
	XML401       *CustomerErrorResponse
	JSON403      *CustomerErrorResponse
	XML403       *CustomerErrorResponse
	JSON404      *CustomerErrorResponse
	XML404       *CustomerErrorResponse
	JSON500      *CustomerErrorResponse
	XML500       *CustomerErrorResponse
	JSON503      *CustomerErrorResponse
	XML503       *CustomerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteContainerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContainerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContainerDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerDetailsDto
	XML200       *ContainerDetailsDto
	JSON400      *CustomerErrorResponse
	XML400       *CustomerErrorResponse
	JSON401      *CustomerErrorResponse
	XML401       *CustomerErrorResponse
	JSON403      *CustomerErrorResponse
	XML403       *CustomerErrorResponse
	JSON404      *CustomerErrorResponse
	XML404       *CustomerErrorResponse
	JSON500      *CustomerErrorResponse
	XML500       *CustomerErrorResponse
	JSON503      *CustomerErrorResponse
	XML503       *CustomerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetContainerDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContainerDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VehicleMappingDto
	XML200       *VehicleMappingDto
	JSON400      *CustomerErrorResponse
	XML400       *CustomerErrorResponse
	JSON401      *CustomerErrorResponse
	XML401       *CustomerErrorResponse
	JSON403      *CustomerErrorResponse
	XML403       *CustomerErrorResponse
	JSON404      *CustomerErrorResponse
	XML404       *CustomerErrorResponse
	JSON500      *CustomerErrorResponse
	XML500       *CustomerErrorResponse
	JSON503      *CustomerErrorResponse
	XML503       *CustomerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBasicDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VehicleDto
	XML200       *VehicleDto
	JSON400      *CustomerErrorResponse
	XML400       *CustomerErrorResponse
	JSON401      *CustomerErrorResponse
	XML401       *CustomerErrorResponse
	JSON403      *CustomerErrorResponse
	XML403       *CustomerErrorResponse
	JSON404      *CustomerErrorResponse
	XML404       *CustomerErrorResponse
	JSON500      *CustomerErrorResponse
	XML500       *CustomerErrorResponse
	JSON503      *CustomerErrorResponse
	XML503       *CustomerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetBasicDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBasicDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChargingHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChargingHistoryResponseDto
	XML200       *ChargingHistoryResponseDto
	JSON400      *CustomerErrorResponse
	XML400       *CustomerErrorResponse
	JSON401      *CustomerErrorResponse
	XML401       *CustomerErrorResponse
	JSON403      *CustomerErrorResponse
	XML403       *CustomerErrorResponse
	JSON404      *CustomerErrorResponse
	XML404       *CustomerErrorResponse
	JSON500      *CustomerErrorResponse
	XML500       *CustomerErrorResponse
	JSON503      *CustomerErrorResponse
	XML503       *CustomerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetChargingHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChargingHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *CustomerErrorResponse
	XML400       *CustomerErrorResponse
	JSON401      *CustomerErrorResponse
	XML401       *CustomerErrorResponse
	JSON403      *CustomerErrorResponse
	XML403       *CustomerErrorResponse
	JSON404      *CustomerErrorResponse
	XML404       *CustomerErrorResponse
	JSON500      *CustomerErrorResponse
	XML500       *CustomerErrorResponse
	JSON503      *CustomerErrorResponse
	XML503       *CustomerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocationBasedChargingSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocationBasedChargingSettingsDto
	XML200       *LocationBasedChargingSettingsDto
	JSON400      *CustomerErrorResponse
	XML400       *CustomerErrorResponse
	JSON401      *CustomerErrorResponse
	XML401       *CustomerErrorResponse
	JSON403      *CustomerErrorResponse
	XML403       *CustomerErrorResponse
	JSON404      *CustomerErrorResponse
	XML404       *CustomerErrorResponse
	JSON500      *CustomerErrorResponse
	XML500       *CustomerErrorResponse
	JSON503      *CustomerErrorResponse
	XML503       *CustomerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetLocationBasedChargingSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocationBasedChargingSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmartMaintenanceTyreDiagnosisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmartMaintenanceTyreDiagnosisDto
	XML200       *SmartMaintenanceTyreDiagnosisDto
	JSON400      *CustomerErrorResponse
	XML400       *CustomerErrorResponse
	JSON401      *CustomerErrorResponse
	XML401       *CustomerErrorResponse
	JSON403      *CustomerErrorResponse
	XML403       *CustomerErrorResponse
	JSON404      *CustomerErrorResponse
	XML404       *CustomerErrorResponse
	JSON500      *CustomerErrorResponse
	XML500       *CustomerErrorResponse
	JSON503      *CustomerErrorResponse
	XML503       *CustomerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSmartMaintenanceTyreDiagnosisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmartMaintenanceTyreDiagnosisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTelematicDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExVeTelematicDataResponseDto
	XML200       *ExVeTelematicDataResponseDto
	JSON400      *CustomerErrorResponse
	XML400       *CustomerErrorResponse
	JSON401      *CustomerErrorResponse
	XML401       *CustomerErrorResponse
	JSON403      *CustomerErrorResponse
	XML403       *CustomerErrorResponse
	JSON404      *CustomerErrorResponse
	XML404       *CustomerErrorResponse
	JSON500      *CustomerErrorResponse
	XML500       *CustomerErrorResponse
	JSON503      *CustomerErrorResponse
	XML503       *CustomerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTelematicDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTelematicDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListContainersWithResponse request returning *ListContainersResponse
func (c *ClientWithResponses) ListContainersWithResponse(ctx context.Context, params *ListContainersParams, reqEditors ...RequestEditorFn) (*ListContainersResponse, error) {
	rsp, err := c.ListContainers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListContainersResponse(rsp)
}

// CreateContainerWithBodyWithResponse request with arbitrary body returning *CreateContainerResponse
func (c *ClientWithResponses) CreateContainerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContainerResponse, error) {
	rsp, err := c.CreateContainerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContainerResponse(rsp)
}

func (c *ClientWithResponses) CreateContainerWithResponse(ctx context.Context, body CreateContainerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContainerResponse, error) {
	rsp, err := c.CreateContainer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContainerResponse(rsp)
}

// DeleteContainerWithResponse request returning *DeleteContainerResponse
func (c *ClientWithResponses) DeleteContainerWithResponse(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*DeleteContainerResponse, error) {
	rsp, err := c.DeleteContainer(ctx, containerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContainerResponse(rsp)
}

// GetContainerDetailsWithResponse request returning *GetContainerDetailsResponse
func (c *ClientWithResponses) GetContainerDetailsWithResponse(ctx context.Context, containerId string, params *GetContainerDetailsParams, reqEditors ...RequestEditorFn) (*GetContainerDetailsResponse, error) {
	rsp, err := c.GetContainerDetails(ctx, containerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContainerDetailsResponse(rsp)
}

// GetMappingsWithResponse request returning *GetMappingsResponse
func (c *ClientWithResponses) GetMappingsWithResponse(ctx context.Context, params *GetMappingsParams, reqEditors ...RequestEditorFn) (*GetMappingsResponse, error) {
	rsp, err := c.GetMappings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMappingsResponse(rsp)
}

// GetBasicDataWithResponse request returning *GetBasicDataResponse
func (c *ClientWithResponses) GetBasicDataWithResponse(ctx context.Context, vin string, params *GetBasicDataParams, reqEditors ...RequestEditorFn) (*GetBasicDataResponse, error) {
	rsp, err := c.GetBasicData(ctx, vin, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBasicDataResponse(rsp)
}

// GetChargingHistoryWithResponse request returning *GetChargingHistoryResponse
func (c *ClientWithResponses) GetChargingHistoryWithResponse(ctx context.Context, vin string, params *GetChargingHistoryParams, reqEditors ...RequestEditorFn) (*GetChargingHistoryResponse, error) {
	rsp, err := c.GetChargingHistory(ctx, vin, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChargingHistoryResponse(rsp)
}

// GetImageWithResponse request returning *GetImageResponse
func (c *ClientWithResponses) GetImageWithResponse(ctx context.Context, vin string, params *GetImageParams, reqEditors ...RequestEditorFn) (*GetImageResponse, error) {
	rsp, err := c.GetImage(ctx, vin, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetImageResponse(rsp)
}

// GetLocationBasedChargingSettingsWithResponse request returning *GetLocationBasedChargingSettingsResponse
func (c *ClientWithResponses) GetLocationBasedChargingSettingsWithResponse(ctx context.Context, vin string, params *GetLocationBasedChargingSettingsParams, reqEditors ...RequestEditorFn) (*GetLocationBasedChargingSettingsResponse, error) {
	rsp, err := c.GetLocationBasedChargingSettings(ctx, vin, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocationBasedChargingSettingsResponse(rsp)
}

// GetSmartMaintenanceTyreDiagnosisWithResponse request returning *GetSmartMaintenanceTyreDiagnosisResponse
func (c *ClientWithResponses) GetSmartMaintenanceTyreDiagnosisWithResponse(ctx context.Context, vin string, params *GetSmartMaintenanceTyreDiagnosisParams, reqEditors ...RequestEditorFn) (*GetSmartMaintenanceTyreDiagnosisResponse, error) {
	rsp, err := c.GetSmartMaintenanceTyreDiagnosis(ctx, vin, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmartMaintenanceTyreDiagnosisResponse(rsp)
}

// GetTelematicDataWithResponse request returning *GetTelematicDataResponse
func (c *ClientWithResponses) GetTelematicDataWithResponse(ctx context.Context, vin string, params *GetTelematicDataParams, reqEditors ...RequestEditorFn) (*GetTelematicDataResponse, error) {
	rsp, err := c.GetTelematicData(ctx, vin, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTelematicDataResponse(rsp)
}

// ParseListContainersResponse parses an HTTP response from a ListContainersWithResponse call
func ParseListContainersResponse(rsp *http.Response) (*ListContainersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListContainersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerListDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest ContainerListDto
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML503 = &dest

	}

	return response, nil
}

// ParseCreateContainerResponse parses an HTTP response from a CreateContainerWithResponse call
func ParseCreateContainerResponse(rsp *http.Response) (*CreateContainerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateContainerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContainerDetailsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest ContainerDetailsDto
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML503 = &dest

	}

	return response, nil
}

// ParseDeleteContainerResponse parses an HTTP response from a DeleteContainerWithResponse call
func ParseDeleteContainerResponse(rsp *http.Response) (*DeleteContainerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContainerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML503 = &dest

	}

	return response, nil
}

// ParseGetContainerDetailsResponse parses an HTTP response from a GetContainerDetailsWithResponse call
func ParseGetContainerDetailsResponse(rsp *http.Response) (*GetContainerDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContainerDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerDetailsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest ContainerDetailsDto
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML503 = &dest

	}

	return response, nil
}

// ParseGetMappingsResponse parses an HTTP response from a GetMappingsWithResponse call
func ParseGetMappingsResponse(rsp *http.Response) (*GetMappingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VehicleMappingDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest VehicleMappingDto
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML503 = &dest

	}

	return response, nil
}

// ParseGetBasicDataResponse parses an HTTP response from a GetBasicDataWithResponse call
func ParseGetBasicDataResponse(rsp *http.Response) (*GetBasicDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBasicDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VehicleDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest VehicleDto
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML503 = &dest

	}

	return response, nil
}

// ParseGetChargingHistoryResponse parses an HTTP response from a GetChargingHistoryWithResponse call
func ParseGetChargingHistoryResponse(rsp *http.Response) (*GetChargingHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChargingHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChargingHistoryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest ChargingHistoryResponseDto
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML503 = &dest

	}

	return response, nil
}

// ParseGetImageResponse parses an HTTP response from a GetImageWithResponse call
func ParseGetImageResponse(rsp *http.Response) (*GetImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML503 = &dest

	}

	return response, nil
}

// ParseGetLocationBasedChargingSettingsResponse parses an HTTP response from a GetLocationBasedChargingSettingsWithResponse call
func ParseGetLocationBasedChargingSettingsResponse(rsp *http.Response) (*GetLocationBasedChargingSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocationBasedChargingSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocationBasedChargingSettingsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest LocationBasedChargingSettingsDto
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML503 = &dest

	}

	return response, nil
}

// ParseGetSmartMaintenanceTyreDiagnosisResponse parses an HTTP response from a GetSmartMaintenanceTyreDiagnosisWithResponse call
func ParseGetSmartMaintenanceTyreDiagnosisResponse(rsp *http.Response) (*GetSmartMaintenanceTyreDiagnosisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmartMaintenanceTyreDiagnosisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmartMaintenanceTyreDiagnosisDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest SmartMaintenanceTyreDiagnosisDto
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML503 = &dest

	}

	return response, nil
}

// ParseGetTelematicDataResponse parses an HTTP response from a GetTelematicDataWithResponse call
func ParseGetTelematicDataResponse(rsp *http.Response) (*GetTelematicDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTelematicDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExVeTelematicDataResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest ExVeTelematicDataResponseDto
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 403:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 404:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 503:
		var dest CustomerErrorResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML503 = &dest

	}

	return response, nil
}
