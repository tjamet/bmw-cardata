// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package auth

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for DeviceCodeFlowPart1CodeChallengeMethod.
const (
	S256 DeviceCodeFlowPart1CodeChallengeMethod = "S256"
)

// Defines values for DeviceCodeFlowPart1ResponseType.
const (
	DeviceCode DeviceCodeFlowPart1ResponseType = "device_code"
)

// DeviceCodeFlowPart1 defines model for DeviceCodeFlowPart1.
type DeviceCodeFlowPart1 struct {
	// ClientId The client id also named api key.
	ClientId openapi_types.UUID `json:"client_id"`

	// CodeChallenge The challenge is derived from the code verifier that is sent in the authorization request during the Device with PKCE flow.
	CodeChallenge string `json:"code_challenge"`

	// CodeChallengeMethod Method to create the code challenge.
	CodeChallengeMethod DeviceCodeFlowPart1CodeChallengeMethod `json:"code_challenge_method"`

	// ResponseType The response_type as fixed value to device_code.
	ResponseType DeviceCodeFlowPart1ResponseType `json:"response_type"`

	// Scope List of space-delimited, case-sensitive scopes. Specify the scopes linked to the permissions requested by the client to the resource owner. If no scopes are set, all scopes registered for the application (OAuth client_id) will be returned.
	Scope string `json:"scope"`
}

// DeviceCodeFlowPart1CodeChallengeMethod Method to create the code challenge.
type DeviceCodeFlowPart1CodeChallengeMethod string

// DeviceCodeFlowPart1ResponseType The response_type as fixed value to device_code.
type DeviceCodeFlowPart1ResponseType string

// DeviceCodeFlowPart3TokenPolling defines model for DeviceCodeFlowPart3TokenPolling.
type DeviceCodeFlowPart3TokenPolling struct {
	// ClientId The client id also named api key.
	ClientId openapi_types.UUID `json:"client_id"`

	// CodeVerifier A random string that will allow a correlation between the authorization- and token request. The code_verifier is generated by the client application. Mandatory for the PKCE flow extention.
	CodeVerifier string `json:"code_verifier"`

	// DeviceCode The device code received in the initiation of the device code flow.
	DeviceCode string `json:"device_code"`

	// GrantType fixed value to <b>urn:ietf:params:oauth:grant-type:device_code</b> for the device code flow.
	GrantType string `json:"grant_type"`
}

// DeviceCodeResponse defines model for DeviceCodeResponse.
type DeviceCodeResponse struct {
	// DeviceCode The device code to allow the backend (authentication provider) to associate the polling requests from the device with the requests that initiated the code flow.
	DeviceCode string `json:"device_code"`

	// ExpiresIn The expiration of the user_code in seconds. Within this time the device code flow needs to be performed.
	ExpiresIn int `json:"expires_in"`

	// Interval The highest frequency in seconds the device is allowed to poll for the successful authentication of the customer.
	Interval *int `json:"interval,omitempty"`

	// UserCode The user code presented to the customer as secret to start the login action for this device.
	UserCode string `json:"user_code"`

	// VerificationUri Link to the UI that allows the user to enter the user_code.
	VerificationUri string `json:"verification_uri"`

	// VerificationUriComplete Link to the UI with the user_code generated.
	VerificationUriComplete string `json:"verification_uri_complete"`
}

// TokenAccessDeniedResponse defines model for TokenAccessDeniedResponse.
type TokenAccessDeniedResponse struct {
	Error            *string `json:"error,omitempty"`
	ErrorDescription *string `json:"error_description,omitempty"`
}

// TokenAuthorizationPendingResponse defines model for TokenAuthorizationPendingResponse.
type TokenAuthorizationPendingResponse struct {
	Error            *string `json:"error,omitempty"`
	ErrorDescription *string `json:"error_description,omitempty"`
}

// TokenBadRequestResponse defines model for TokenBadRequestResponse.
type TokenBadRequestResponse struct {
	Error            *string `json:"error,omitempty"`
	ErrorDescription *string `json:"error_description,omitempty"`
}

// TokenExpiredResponse defines model for TokenExpiredResponse.
type TokenExpiredResponse struct {
	Error            *string `json:"error,omitempty"`
	ErrorDescription *string `json:"error_description,omitempty"`
}

// TokenInvalidClientResponse defines model for TokenInvalidClientResponse.
type TokenInvalidClientResponse struct {
	Error            *string `json:"error,omitempty"`
	ErrorDescription *string `json:"error_description,omitempty"`
}

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	AccessToken string `json:"access_token"`
	ExpiresIn   int    `json:"expires_in"`

	// Gcid GCID of user account, formatted as UUID.
	Gcid string `json:"gcid"`

	// IdToken The id_token is only returned if the scope openid was in the authenticate call.
	IdToken      *string `json:"id_token,omitempty"`
	RefreshToken string  `json:"refresh_token"`
	Scope        string  `json:"scope"`
	TokenType    string  `json:"token_type"`
}

// TokenResponseDeviceCodeFlow defines model for TokenResponseDeviceCodeFlow.
type TokenResponseDeviceCodeFlow struct {
	AccessToken string `json:"access_token"`
	ExpiresIn   int    `json:"expires_in"`

	// Gcid GCID of user account, formatted as UUID.
	Gcid string `json:"gcid"`

	// IdToken The id_token is only returned if the scope openid was in the authenticate call.
	IdToken      *string `json:"id_token,omitempty"`
	RefreshToken string  `json:"refresh_token"`
	Scope        string  `json:"scope"`
	TokenType    string  `json:"token_type"`
}

// TokenSlowDownResponse defines model for TokenSlowDownResponse.
type TokenSlowDownResponse struct {
	Error            *string `json:"error,omitempty"`
	ErrorDescription *string `json:"error_description,omitempty"`
}

// PostGcdmOauthDeviceCodeParams defines parameters for PostGcdmOauthDeviceCode.
type PostGcdmOauthDeviceCodeParams struct {
	// ContentType Fixed value “application/x-www-form-urlencoded”
	ContentType string `json:"Content-Type"`
}

// PostGcdmOauthTokenParams defines parameters for PostGcdmOauthToken.
type PostGcdmOauthTokenParams struct {
	// ContentType Fixed value “application/x-www-form-urlencoded”
	ContentType string `json:"Content-Type"`
}

// PostGcdmOauthDeviceCodeFormdataRequestBody defines body for PostGcdmOauthDeviceCode for application/x-www-form-urlencoded ContentType.
type PostGcdmOauthDeviceCodeFormdataRequestBody = DeviceCodeFlowPart1

// PostGcdmOauthTokenFormdataRequestBody defines body for PostGcdmOauthToken for application/x-www-form-urlencoded ContentType.
type PostGcdmOauthTokenFormdataRequestBody = DeviceCodeFlowPart3TokenPolling

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostGcdmOauthDeviceCodeWithBody request with any body
	PostGcdmOauthDeviceCodeWithBody(ctx context.Context, params *PostGcdmOauthDeviceCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGcdmOauthDeviceCodeWithFormdataBody(ctx context.Context, params *PostGcdmOauthDeviceCodeParams, body PostGcdmOauthDeviceCodeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGcdmOauthTokenWithBody request with any body
	PostGcdmOauthTokenWithBody(ctx context.Context, params *PostGcdmOauthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGcdmOauthTokenWithFormdataBody(ctx context.Context, params *PostGcdmOauthTokenParams, body PostGcdmOauthTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostGcdmOauthDeviceCodeWithBody(ctx context.Context, params *PostGcdmOauthDeviceCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGcdmOauthDeviceCodeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGcdmOauthDeviceCodeWithFormdataBody(ctx context.Context, params *PostGcdmOauthDeviceCodeParams, body PostGcdmOauthDeviceCodeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGcdmOauthDeviceCodeRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGcdmOauthTokenWithBody(ctx context.Context, params *PostGcdmOauthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGcdmOauthTokenRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGcdmOauthTokenWithFormdataBody(ctx context.Context, params *PostGcdmOauthTokenParams, body PostGcdmOauthTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGcdmOauthTokenRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostGcdmOauthDeviceCodeRequestWithFormdataBody calls the generic PostGcdmOauthDeviceCode builder with application/x-www-form-urlencoded body
func NewPostGcdmOauthDeviceCodeRequestWithFormdataBody(server string, params *PostGcdmOauthDeviceCodeParams, body PostGcdmOauthDeviceCodeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostGcdmOauthDeviceCodeRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostGcdmOauthDeviceCodeRequestWithBody generates requests for PostGcdmOauthDeviceCode with any type of body
func NewPostGcdmOauthDeviceCodeRequestWithBody(server string, params *PostGcdmOauthDeviceCodeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gcdm/oauth/device/code")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Content-Type", headerParam0)

	}

	return req, nil
}

// NewPostGcdmOauthTokenRequestWithFormdataBody calls the generic PostGcdmOauthToken builder with application/x-www-form-urlencoded body
func NewPostGcdmOauthTokenRequestWithFormdataBody(server string, params *PostGcdmOauthTokenParams, body PostGcdmOauthTokenFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostGcdmOauthTokenRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostGcdmOauthTokenRequestWithBody generates requests for PostGcdmOauthToken with any type of body
func NewPostGcdmOauthTokenRequestWithBody(server string, params *PostGcdmOauthTokenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gcdm/oauth/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Content-Type", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostGcdmOauthDeviceCodeWithBodyWithResponse request with any body
	PostGcdmOauthDeviceCodeWithBodyWithResponse(ctx context.Context, params *PostGcdmOauthDeviceCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGcdmOauthDeviceCodeResponse, error)

	PostGcdmOauthDeviceCodeWithFormdataBodyWithResponse(ctx context.Context, params *PostGcdmOauthDeviceCodeParams, body PostGcdmOauthDeviceCodeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGcdmOauthDeviceCodeResponse, error)

	// PostGcdmOauthTokenWithBodyWithResponse request with any body
	PostGcdmOauthTokenWithBodyWithResponse(ctx context.Context, params *PostGcdmOauthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGcdmOauthTokenResponse, error)

	PostGcdmOauthTokenWithFormdataBodyWithResponse(ctx context.Context, params *PostGcdmOauthTokenParams, body PostGcdmOauthTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGcdmOauthTokenResponse, error)
}

type PostGcdmOauthDeviceCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceCodeResponse
	JSON400      *struct {
		Error            *string `json:"error,omitempty"`
		ErrorDescription *string `json:"error_description,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostGcdmOauthDeviceCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGcdmOauthDeviceCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGcdmOauthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON400 *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		union json.RawMessage
	}
	JSON403 *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostGcdmOauthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGcdmOauthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostGcdmOauthDeviceCodeWithBodyWithResponse request with arbitrary body returning *PostGcdmOauthDeviceCodeResponse
func (c *ClientWithResponses) PostGcdmOauthDeviceCodeWithBodyWithResponse(ctx context.Context, params *PostGcdmOauthDeviceCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGcdmOauthDeviceCodeResponse, error) {
	rsp, err := c.PostGcdmOauthDeviceCodeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGcdmOauthDeviceCodeResponse(rsp)
}

func (c *ClientWithResponses) PostGcdmOauthDeviceCodeWithFormdataBodyWithResponse(ctx context.Context, params *PostGcdmOauthDeviceCodeParams, body PostGcdmOauthDeviceCodeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGcdmOauthDeviceCodeResponse, error) {
	rsp, err := c.PostGcdmOauthDeviceCodeWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGcdmOauthDeviceCodeResponse(rsp)
}

// PostGcdmOauthTokenWithBodyWithResponse request with arbitrary body returning *PostGcdmOauthTokenResponse
func (c *ClientWithResponses) PostGcdmOauthTokenWithBodyWithResponse(ctx context.Context, params *PostGcdmOauthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGcdmOauthTokenResponse, error) {
	rsp, err := c.PostGcdmOauthTokenWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGcdmOauthTokenResponse(rsp)
}

func (c *ClientWithResponses) PostGcdmOauthTokenWithFormdataBodyWithResponse(ctx context.Context, params *PostGcdmOauthTokenParams, body PostGcdmOauthTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostGcdmOauthTokenResponse, error) {
	rsp, err := c.PostGcdmOauthTokenWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGcdmOauthTokenResponse(rsp)
}

// ParsePostGcdmOauthDeviceCodeResponse parses an HTTP response from a PostGcdmOauthDeviceCodeWithResponse call
func ParsePostGcdmOauthDeviceCodeResponse(rsp *http.Response) (*PostGcdmOauthDeviceCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGcdmOauthDeviceCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceCodeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error            *string `json:"error,omitempty"`
			ErrorDescription *string `json:"error_description,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostGcdmOauthTokenResponse parses an HTTP response from a PostGcdmOauthTokenWithResponse call
func ParsePostGcdmOauthTokenResponse(rsp *http.Response) (*PostGcdmOauthTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGcdmOauthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}
